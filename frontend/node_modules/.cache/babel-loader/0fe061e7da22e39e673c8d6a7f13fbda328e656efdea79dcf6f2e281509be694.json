{"ast":null,"code":"var _jsxFileName = \"/Users/robertford/Repos/rational-onion/frontend/src/ArgumentDAG.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport cytoscape from 'cytoscape';\nimport './ArgumentDAG.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ArgumentDAG = () => {\n  _s();\n  const containerRef = useRef(null);\n  const cyRef = useRef(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const fetchData = useCallback(async () => {\n    if (!containerRef.current) {\n      console.error('Container ref is not available');\n      setError('Visualization container is not ready');\n      setLoading(false);\n      return;\n    }\n    try {\n      console.log('Starting data fetch - Container ref is available');\n      setLoading(true);\n      setError(null);\n\n      // Detailed logging for fetch configuration\n      console.log('Fetch Configuration:', {\n        url: 'http://localhost:8000/visualize-argument-dag',\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-API-Key': 'test_api_key_123'\n        }\n      });\n      const response = await fetch('http://localhost:8000/visualize-argument-dag', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-API-Key': 'test_api_key_123'\n        }\n      });\n      console.log('Fetch Response:', {\n        status: response.status,\n        statusText: response.statusText,\n        headers: Object.fromEntries(response.headers.entries())\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Fetch Error Response:', errorText);\n        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\n      }\n      const data = await response.json();\n      console.log('Parsed JSON Data:', data);\n\n      // Validate data structure\n      if (!data || !data.nodes || !data.edges) {\n        console.warn('Received invalid data structure:', data);\n        setError('Invalid graph data received');\n        setLoading(false);\n        return;\n      }\n\n      // Log node and edge details\n      console.log('Nodes:', data.nodes);\n      console.log('Edges:', data.edges);\n      console.log('Layout:', data.layout);\n\n      // Prepare Cytoscape elements\n      const cytoscapeElements = [...data.nodes.map(node => ({\n        data: {\n          id: node.id,\n          label: node.label,\n          type: node.type\n        }\n      })), ...data.edges.map(edge => ({\n        data: {\n          source: edge.source,\n          target: edge.target,\n          type: edge.type\n        }\n      }))];\n      console.log('Cytoscape Elements:', cytoscapeElements);\n\n      // Initialize or update Cytoscape\n      if (cyRef.current) {\n        cyRef.current.destroy();\n      }\n      cyRef.current = cytoscape({\n        container: containerRef.current,\n        elements: cytoscapeElements,\n        style: [{\n          selector: 'node',\n          style: {\n            'background-color': '#666',\n            'label': 'data(label)',\n            'color': '#fff',\n            'text-valign': 'center',\n            'text-halign': 'center'\n          }\n        }, {\n          selector: 'edge',\n          style: {\n            'width': 3,\n            'line-color': '#ccc',\n            'target-arrow-color': '#ccc',\n            'target-arrow-shape': 'triangle',\n            'curve-style': 'bezier'\n          }\n        }],\n        layout: data.layout || {\n          name: 'cose'\n        }\n      });\n      setLoading(false);\n    } catch (err) {\n      console.error('Comprehensive Fetch Error:', {\n        message: err.message,\n        name: err.name,\n        stack: err.stack\n      });\n      setError(`Error loading visualization: ${err.message}`);\n      setLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    fetchData();\n\n    // Cleanup function\n    const fetchData = async () => {\n      try {\n        console.log(\"ArgumentDAG: Starting fetchData\");\n\n        // Check if container is available\n        if (!containerRef.current) {\n          console.error(\"ArgumentDAG: Container ref not available\");\n          setError(\"Container reference not available. Please try refreshing the page.\");\n          setLoading(false);\n          return;\n        }\n        console.log(\"ArgumentDAG: Container ref available, fetching data...\");\n        const response = await fetch('http://localhost:8000/visualize-argument-dag', {\n          method: 'GET',\n          headers: {\n            'X-API-Key': 'test_api_key_123',\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          mode: 'cors',\n          credentials: 'same-origin'\n        });\n        console.log(\"ArgumentDAG: Fetch response received\", response);\n        if (!response.ok) {\n          throw new Error(`API responded with status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(\"ArgumentDAG: Data received:\", data);\n        if (!data || !data.nodes || !data.edges || data.nodes.length === 0) {\n          console.warn(\"ArgumentDAG: No graph data available\");\n          setError(\"No graph data available. The API returned empty data.\");\n          setLoading(false);\n          return;\n        }\n\n        // Format elements for Cytoscape\n        const elements = {\n          nodes: data.nodes.map(node => {\n            console.log(\"ArgumentDAG: Processing node:\", node);\n            return {\n              data: {\n                id: node.id,\n                label: node.label || node.text,\n                type: node.type,\n                details: node.details || ''\n              }\n            };\n          }),\n          edges: data.edges.map(edge => {\n            console.log(\"ArgumentDAG: Processing edge:\", edge);\n            return {\n              data: {\n                id: `edge-${edge.source}-${edge.target}`,\n                source: edge.source,\n                target: edge.target,\n                label: edge.type,\n                relationship: edge.type\n              }\n            };\n          })\n        };\n        console.log(\"ArgumentDAG: Formatted elements:\", elements);\n\n        // Initialize Cytoscape\n        try {\n          cyRef.current = cytoscape({\n            container: containerRef.current,\n            elements: elements,\n            style: [{\n              selector: 'node',\n              style: {\n                'background-color': '#FF4136',\n                'label': 'data(label)',\n                'text-valign': 'center',\n                'color': '#fff',\n                'font-size': '12px',\n                'width': 100,\n                'height': 100,\n                'text-wrap': 'wrap'\n              }\n            }, {\n              selector: 'edge',\n              style: {\n                'width': 2,\n                'line-color': '#ccc',\n                'target-arrow-shape': 'triangle',\n                'target-arrow-color': '#ccc',\n                'curve-style': 'bezier',\n                'label': 'data(label)'\n              }\n            }],\n            layout: data.layout || {\n              name: 'cose',\n              animate: true,\n              nodeDimensionsIncludeLabels: true\n            }\n          });\n          console.log(\"ArgumentDAG: Cytoscape initialized successfully\");\n        } catch (cyError) {\n          console.error(\"ArgumentDAG: Cytoscape initialization error:\", cyError);\n          setError(`Cytoscape initialization error: ${cyError.message}`);\n        }\n\n        // Add event listeners for filtering\n        const filterByClaim = claimType => {\n          cyRef.current.nodes().forEach(node => {\n            if (node.data('type') === claimType) {\n              node.style('opacity', 1);\n            } else {\n              node.style('opacity', 0.3);\n            }\n          });\n        };\n        const resetFilter = () => {\n          cyRef.current.nodes().style('opacity', 1);\n        };\n\n        // Add event listeners to buttons if they exist\n        const claimFilterBtn = document.getElementById('filter-claims');\n        const resetFilterBtn = document.getElementById('reset-filter');\n        if (claimFilterBtn) {\n          claimFilterBtn.addEventListener('click', () => filterByClaim('claim'));\n        }\n        if (resetFilterBtn) {\n          resetFilterBtn.addEventListener('click', resetFilter);\n        }\n        setLoading(false);\n      } catch (err) {\n        console.error(\"ArgumentDAG: Error loading visualization:\", err);\n        setError(`Error loading visualization: ${err.message}`);\n        setLoading(false);\n      }\n    };\n    fetchData();\n\n    // Cleanup function\n    return () => {\n      if (cyRef.current) {\n        cyRef.current.destroy();\n      }\n\n      // Remove event listeners\n      const claimFilterBtn = document.getElementById('filter-claims');\n      const resetFilterBtn = document.getElementById('reset-filter');\n      if (claimFilterBtn) {\n        claimFilterBtn.removeEventListener('click', () => {});\n      }\n      if (resetFilterBtn) {\n        resetFilterBtn.removeEventListener('click', () => {});\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dag-container\",\n    children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-message\",\n      children: \"Initializing visualization...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      className: \"cytoscape-container\",\n      style: {\n        width: '100%',\n        height: '600px',\n        display: loading || error ? 'none' : 'block'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 311,\n    columnNumber: 5\n  }, this);\n};\n_s(ArgumentDAG, \"vAP/EJX6U4BFnrlw8Qnj+q4QTIs=\");\n_c = ArgumentDAG;\nexport default ArgumentDAG;\nvar _c;\n$RefreshReg$(_c, \"ArgumentDAG\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useCallback","cytoscape","jsxDEV","_jsxDEV","ArgumentDAG","_s","containerRef","cyRef","error","setError","loading","setLoading","fetchData","current","console","log","url","method","headers","response","fetch","status","statusText","Object","fromEntries","entries","ok","errorText","text","Error","data","json","nodes","edges","warn","layout","cytoscapeElements","map","node","id","label","type","edge","source","target","destroy","container","elements","style","selector","name","err","message","stack","mode","credentials","length","details","relationship","animate","nodeDimensionsIncludeLabels","cyError","filterByClaim","claimType","forEach","resetFilter","claimFilterBtn","document","getElementById","resetFilterBtn","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","width","height","display","_c","$RefreshReg$"],"sources":["/Users/robertford/Repos/rational-onion/frontend/src/ArgumentDAG.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport cytoscape from 'cytoscape';\nimport './ArgumentDAG.css';\n\nconst ArgumentDAG = () => {\n  const containerRef = useRef(null);\n  const cyRef = useRef(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  const fetchData = useCallback(async () => {\n    if (!containerRef.current) {\n      console.error('Container ref is not available');\n      setError('Visualization container is not ready');\n      setLoading(false);\n      return;\n    }\n\n    try {\n      console.log('Starting data fetch - Container ref is available');\n      setLoading(true);\n      setError(null);\n\n      // Detailed logging for fetch configuration\n      console.log('Fetch Configuration:', {\n        url: 'http://localhost:8000/visualize-argument-dag',\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-API-Key': 'test_api_key_123'\n        }\n      });\n\n      const response = await fetch('http://localhost:8000/visualize-argument-dag', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-API-Key': 'test_api_key_123'\n        }\n      });\n\n      console.log('Fetch Response:', {\n        status: response.status,\n        statusText: response.statusText,\n        headers: Object.fromEntries(response.headers.entries())\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Fetch Error Response:', errorText);\n        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log('Parsed JSON Data:', data);\n\n      // Validate data structure\n      if (!data || !data.nodes || !data.edges) {\n        console.warn('Received invalid data structure:', data);\n        setError('Invalid graph data received');\n        setLoading(false);\n        return;\n      }\n\n      // Log node and edge details\n      console.log('Nodes:', data.nodes);\n      console.log('Edges:', data.edges);\n      console.log('Layout:', data.layout);\n\n      // Prepare Cytoscape elements\n      const cytoscapeElements = [\n        ...data.nodes.map(node => ({\n          data: {\n            id: node.id,\n            label: node.label,\n            type: node.type\n          }\n        })),\n        ...data.edges.map(edge => ({\n          data: {\n            source: edge.source,\n            target: edge.target,\n            type: edge.type\n          }\n        }))\n      ];\n\n      console.log('Cytoscape Elements:', cytoscapeElements);\n\n      // Initialize or update Cytoscape\n      if (cyRef.current) {\n        cyRef.current.destroy();\n      }\n\n      cyRef.current = cytoscape({\n        container: containerRef.current,\n        elements: cytoscapeElements,\n        style: [\n          {\n            selector: 'node',\n            style: {\n              'background-color': '#666',\n              'label': 'data(label)',\n              'color': '#fff',\n              'text-valign': 'center',\n              'text-halign': 'center'\n            }\n          },\n          {\n            selector: 'edge',\n            style: {\n              'width': 3,\n              'line-color': '#ccc',\n              'target-arrow-color': '#ccc',\n              'target-arrow-shape': 'triangle',\n              'curve-style': 'bezier'\n            }\n          }\n        ],\n        layout: data.layout || { name: 'cose' }\n      });\n\n      setLoading(false);\n    } catch (err) {\n      console.error('Comprehensive Fetch Error:', {\n        message: err.message,\n        name: err.name,\n        stack: err.stack\n      });\n      setError(`Error loading visualization: ${err.message}`);\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n\n    // Cleanup function\n    const fetchData = async () => {\n      try {\n        console.log(\"ArgumentDAG: Starting fetchData\");\n        \n        // Check if container is available\n        if (!containerRef.current) {\n          console.error(\"ArgumentDAG: Container ref not available\");\n          setError(\"Container reference not available. Please try refreshing the page.\");\n          setLoading(false);\n          return;\n        }\n\n        console.log(\"ArgumentDAG: Container ref available, fetching data...\");\n        \n        const response = await fetch('http://localhost:8000/visualize-argument-dag', {\n          method: 'GET',\n          headers: {\n            'X-API-Key': 'test_api_key_123',\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          mode: 'cors',\n          credentials: 'same-origin'\n        });\n\n        console.log(\"ArgumentDAG: Fetch response received\", response);\n\n        if (!response.ok) {\n          throw new Error(`API responded with status: ${response.status}`);\n        }\n\n        const data = await response.json();\n        console.log(\"ArgumentDAG: Data received:\", data);\n\n        if (!data || !data.nodes || !data.edges || data.nodes.length === 0) {\n          console.warn(\"ArgumentDAG: No graph data available\");\n          setError(\"No graph data available. The API returned empty data.\");\n          setLoading(false);\n          return;\n        }\n\n        // Format elements for Cytoscape\n        const elements = {\n          nodes: data.nodes.map(node => {\n            console.log(\"ArgumentDAG: Processing node:\", node);\n            return {\n              data: {\n                id: node.id,\n                label: node.label || node.text,\n                type: node.type,\n                details: node.details || ''\n              }\n            };\n          }),\n          edges: data.edges.map(edge => {\n            console.log(\"ArgumentDAG: Processing edge:\", edge);\n            return {\n              data: {\n                id: `edge-${edge.source}-${edge.target}`,\n                source: edge.source,\n                target: edge.target,\n                label: edge.type,\n                relationship: edge.type\n              }\n            };\n          })\n        };\n\n        console.log(\"ArgumentDAG: Formatted elements:\", elements);\n\n        // Initialize Cytoscape\n        try {\n          cyRef.current = cytoscape({\n            container: containerRef.current,\n            elements: elements,\n            style: [\n              {\n                selector: 'node',\n                style: {\n                  'background-color': '#FF4136',\n                  'label': 'data(label)',\n                  'text-valign': 'center',\n                  'color': '#fff',\n                  'font-size': '12px',\n                  'width': 100,\n                  'height': 100,\n                  'text-wrap': 'wrap'\n                }\n              },\n              {\n                selector: 'edge',\n                style: {\n                  'width': 2,\n                  'line-color': '#ccc',\n                  'target-arrow-shape': 'triangle',\n                  'target-arrow-color': '#ccc',\n                  'curve-style': 'bezier',\n                  'label': 'data(label)'\n                }\n              }\n            ],\n            layout: data.layout || {\n              name: 'cose',\n              animate: true,\n              nodeDimensionsIncludeLabels: true\n            }\n          });\n\n          console.log(\"ArgumentDAG: Cytoscape initialized successfully\");\n        } catch (cyError) {\n          console.error(\"ArgumentDAG: Cytoscape initialization error:\", cyError);\n          setError(`Cytoscape initialization error: ${cyError.message}`);\n        }\n\n        // Add event listeners for filtering\n        const filterByClaim = (claimType) => {\n          cyRef.current.nodes().forEach(node => {\n            if (node.data('type') === claimType) {\n              node.style('opacity', 1);\n            } else {\n              node.style('opacity', 0.3);\n            }\n          });\n        };\n\n        const resetFilter = () => {\n          cyRef.current.nodes().style('opacity', 1);\n        };\n\n        // Add event listeners to buttons if they exist\n        const claimFilterBtn = document.getElementById('filter-claims');\n        const resetFilterBtn = document.getElementById('reset-filter');\n\n        if (claimFilterBtn) {\n          claimFilterBtn.addEventListener('click', () => filterByClaim('claim'));\n        }\n\n        if (resetFilterBtn) {\n          resetFilterBtn.addEventListener('click', resetFilter);\n        }\n\n        setLoading(false);\n      } catch (err) {\n        console.error(\"ArgumentDAG: Error loading visualization:\", err);\n        setError(`Error loading visualization: ${err.message}`);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n\n    // Cleanup function\n    return () => {\n      if (cyRef.current) {\n        cyRef.current.destroy();\n      }\n      \n      // Remove event listeners\n      const claimFilterBtn = document.getElementById('filter-claims');\n      const resetFilterBtn = document.getElementById('reset-filter');\n      \n      if (claimFilterBtn) {\n        claimFilterBtn.removeEventListener('click', () => {});\n      }\n      \n      if (resetFilterBtn) {\n        resetFilterBtn.removeEventListener('click', () => {});\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"dag-container\">\n      {loading && <div className=\"loading-message\">Initializing visualization...</div>}\n      {error && <div className=\"error-message\">{error}</div>}\n      <div \n        ref={containerRef} \n        className=\"cytoscape-container\" \n        style={{ \n          width: '100%', \n          height: '600px',\n          display: loading || error ? 'none' : 'block'\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ArgumentDAG;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
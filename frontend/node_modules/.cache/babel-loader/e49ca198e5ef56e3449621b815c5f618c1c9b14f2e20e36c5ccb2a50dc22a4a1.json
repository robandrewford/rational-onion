{"ast":null,"code":"var _jsxFileName = \"/Users/robertford/Repos/rational-onion/frontend/src/ArgumentDAG.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport cytoscape from 'cytoscape';\nimport tippy from 'tippy.js';\nimport 'tippy.js/dist/tippy.css';\nimport './ArgumentDAG.css'; // If you want separate styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ArgumentDAG = () => {\n  _s();\n  const cyRef = useRef(null);\n  const containerRef = useRef(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    console.log('Initializing visualization...');\n\n    // Wait for the container to be available in the DOM\n    if (!containerRef.current) {\n      console.error('Container ref not available');\n      return;\n    }\n    console.log('Container found, fetching data...');\n\n    // Replace with your local or deployed API address\n    fetch('http://localhost:8000/visualize-argument-dag', {\n      method: 'GET',\n      headers: {\n        'X-API-Key': 'test_api_key_123',\n        'Accept': 'application/json'\n      },\n      mode: 'cors'\n    }).then(response => {\n      console.log('Response status:', response.status);\n      if (!response.ok) {\n        throw new Error(`API responded with status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      console.log('Data received:', data);\n      setLoading(false);\n      if (!data.nodes || !data.edges) {\n        console.error('Invalid data format received:', data);\n        setError('Invalid data format received from API');\n        return;\n      }\n      if (data.nodes.length === 0) {\n        console.warn('No nodes found in the data');\n        setError('No graph data available to display');\n        return;\n      }\n\n      // Initialize Cytoscape\n      try {\n        console.log('Initializing Cytoscape with container:', containerRef.current);\n        const cy = cytoscape({\n          container: containerRef.current,\n          elements: [...data.nodes.map(node => ({\n            data: {\n              id: node.id,\n              label: node.text || node.label,\n              type: node.type || node.label,\n              details: node.details || ''\n            }\n          })), ...data.edges.map(edge => ({\n            data: {\n              source: edge.source,\n              target: edge.target,\n              label: edge.type,\n              relationship: edge.type\n            }\n          }))],\n          style: [{\n            selector: 'node',\n            style: {\n              'background-color': '#0074D9',\n              'label': 'data(label)',\n              'text-valign': 'center',\n              'color': '#fff',\n              'font-size': '12px',\n              'border-width': 2,\n              'border-color': '#fff',\n              'width': 100,\n              'height': 100,\n              'text-wrap': 'wrap',\n              'text-max-width': '80px'\n            }\n          }, {\n            selector: '[type = \"Claim\"]',\n            style: {\n              'background-color': '#FF4136'\n            }\n          }, {\n            selector: '[type = \"claim\"]',\n            style: {\n              'background-color': '#FF4136'\n            }\n          }, {\n            selector: '[type = \"Warrant\"]',\n            style: {\n              'background-color': '#2ECC40'\n            }\n          }, {\n            selector: '[type = \"Rebuttal\"]',\n            style: {\n              'background-color': '#FF851B'\n            }\n          }, {\n            selector: 'edge',\n            style: {\n              'width': 2,\n              'line-color': '#ccc',\n              'target-arrow-shape': 'triangle',\n              'target-arrow-color': '#ccc',\n              'curve-style': 'bezier',\n              'label': 'data(relationship)'\n            }\n          }, {\n            selector: '.highlighted',\n            style: {\n              'line-color': '#FFD700',\n              'target-arrow-color': '#FFD700',\n              'width': 4\n            }\n          }],\n          layout: {\n            name: 'cose',\n            animate: true,\n            nodeDimensionsIncludeLabels: true,\n            refresh: 20,\n            fit: true,\n            padding: 30,\n            randomize: false,\n            componentSpacing: 100,\n            nodeRepulsion: 400000,\n            nodeOverlap: 10,\n            idealEdgeLength: 100,\n            edgeElasticity: 100,\n            nestingFactor: 5,\n            gravity: 80,\n            numIter: 1000,\n            initialTemp: 200,\n            coolingFactor: 0.95,\n            minTemp: 1.0\n          }\n        });\n        cyRef.current = cy;\n        console.log('Cytoscape initialized with elements:', cy.elements().length);\n\n        // Node tooltips (Tippy.js)\n        cy.nodes().forEach(node => {\n          const ref = node.popperRef();\n          tippy(ref, {\n            content: `Type: ${node.data('type')}\\nDetails: ${node.data('details') || 'N/A'}`,\n            trigger: 'mouseenter',\n            placement: 'top',\n            arrow: true,\n            theme: 'light'\n          });\n        });\n\n        // Edge hover highlight\n        cy.on('mouseover', 'edge', evt => {\n          evt.target.addClass('highlighted');\n        });\n        cy.on('mouseout', 'edge', evt => {\n          evt.target.removeClass('highlighted');\n        });\n\n        // Clickable edge interactions\n        cy.on('tap', 'edge', evt => {\n          const edge = evt.target;\n          alert(`Relationship: ${edge.data('relationship')}\\nSource: ${edge.data('source')}\\nTarget: ${edge.data('target')}`);\n        });\n\n        // Run layout\n        cy.layout({\n          name: 'cose',\n          animate: true,\n          nodeDimensionsIncludeLabels: true\n        }).run();\n      } catch (error) {\n        console.error('Error initializing Cytoscape:', error);\n        setError(`Error initializing visualization: ${error.message}`);\n      }\n    }).catch(error => {\n      console.error('Error fetching or processing DAG:', error);\n      setError(`Error loading visualization: ${error.message}`);\n      setLoading(false);\n    });\n\n    // Cleanup function\n    return () => {\n      if (cyRef.current) {\n        cyRef.current.destroy();\n      }\n    };\n  }, []);\n\n  // Add event handlers for the filter buttons\n  useEffect(() => {\n    const filterClaimsBtn = document.getElementById('filter-claims');\n    const resetFilterBtn = document.getElementById('reset-filter');\n    if (filterClaimsBtn && resetFilterBtn && cyRef.current) {\n      const handleFilterClaims = () => {\n        if (cyRef.current) {\n          cyRef.current.nodes().forEach(node => {\n            const type = node.data('type').toLowerCase();\n            node.style('display', type === 'claim' ? 'element' : 'none');\n          });\n        }\n      };\n      const handleResetFilter = () => {\n        if (cyRef.current) {\n          cyRef.current.nodes().forEach(node => {\n            node.style('display', 'element');\n          });\n        }\n      };\n      filterClaimsBtn.addEventListener('click', handleFilterClaims);\n      resetFilterBtn.addEventListener('click', handleResetFilter);\n      return () => {\n        filterClaimsBtn.removeEventListener('click', handleFilterClaims);\n        resetFilterBtn.removeEventListener('click', handleResetFilter);\n      };\n    }\n  }, [cyRef.current]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dag-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      id: \"cy\",\n      style: {\n        width: '100%',\n        height: '600px',\n        border: '1px solid #ccc',\n        position: 'relative'\n      },\n      children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-message\",\n        children: \"Loading visualization...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"filter-claims\",\n        children: \"Show Only Claims\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"reset-filter\",\n        children: \"Reset Filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 5\n  }, this);\n};\n_s(ArgumentDAG, \"5EtwxNP5wizXwOZGsCRPQFOZ+Fo=\");\n_c = ArgumentDAG;\nexport default ArgumentDAG;\nvar _c;\n$RefreshReg$(_c, \"ArgumentDAG\");","map":{"version":3,"names":["React","useEffect","useRef","useState","cytoscape","tippy","jsxDEV","_jsxDEV","ArgumentDAG","_s","cyRef","containerRef","error","setError","loading","setLoading","console","log","current","fetch","method","headers","mode","then","response","status","ok","Error","json","data","nodes","edges","length","warn","cy","container","elements","map","node","id","label","text","type","details","edge","source","target","relationship","style","selector","layout","name","animate","nodeDimensionsIncludeLabels","refresh","fit","padding","randomize","componentSpacing","nodeRepulsion","nodeOverlap","idealEdgeLength","edgeElasticity","nestingFactor","gravity","numIter","initialTemp","coolingFactor","minTemp","forEach","ref","popperRef","content","trigger","placement","arrow","theme","on","evt","addClass","removeClass","alert","run","message","catch","destroy","filterClaimsBtn","document","getElementById","resetFilterBtn","handleFilterClaims","toLowerCase","handleResetFilter","addEventListener","removeEventListener","className","children","width","height","border","position","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/robertford/Repos/rational-onion/frontend/src/ArgumentDAG.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport cytoscape from 'cytoscape';\nimport tippy from 'tippy.js';\nimport 'tippy.js/dist/tippy.css';\nimport './ArgumentDAG.css'; // If you want separate styling\n\nconst ArgumentDAG = () => {\n  const cyRef = useRef(null);\n  const containerRef = useRef(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  \n  useEffect(() => {\n    console.log('Initializing visualization...');\n    \n    // Wait for the container to be available in the DOM\n    if (!containerRef.current) {\n      console.error('Container ref not available');\n      return;\n    }\n    \n    console.log('Container found, fetching data...');\n    \n    // Replace with your local or deployed API address\n    fetch('http://localhost:8000/visualize-argument-dag', {\n      method: 'GET',\n      headers: {\n        'X-API-Key': 'test_api_key_123',\n        'Accept': 'application/json'\n      },\n      mode: 'cors'\n    })\n      .then(response => {\n        console.log('Response status:', response.status);\n        if (!response.ok) {\n          throw new Error(`API responded with status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(data => {\n        console.log('Data received:', data);\n        setLoading(false);\n        \n        if (!data.nodes || !data.edges) {\n          console.error('Invalid data format received:', data);\n          setError('Invalid data format received from API');\n          return;\n        }\n        \n        if (data.nodes.length === 0) {\n          console.warn('No nodes found in the data');\n          setError('No graph data available to display');\n          return;\n        }\n        \n        // Initialize Cytoscape\n        try {\n          console.log('Initializing Cytoscape with container:', containerRef.current);\n          \n          const cy = cytoscape({\n            container: containerRef.current,\n            elements: [\n              ...data.nodes.map(node => ({\n                data: {\n                  id: node.id,\n                  label: node.text || node.label,\n                  type: node.type || node.label,\n                  details: node.details || ''\n                }\n              })),\n              ...data.edges.map(edge => ({\n                data: {\n                  source: edge.source,\n                  target: edge.target,\n                  label: edge.type,\n                  relationship: edge.type\n                }\n              }))\n            ],\n            style: [\n              {\n                selector: 'node',\n                style: {\n                  'background-color': '#0074D9',\n                  'label': 'data(label)',\n                  'text-valign': 'center',\n                  'color': '#fff',\n                  'font-size': '12px',\n                  'border-width': 2,\n                  'border-color': '#fff',\n                  'width': 100,\n                  'height': 100,\n                  'text-wrap': 'wrap',\n                  'text-max-width': '80px'\n                }\n              },\n              {\n                selector: '[type = \"Claim\"]',\n                style: {\n                  'background-color': '#FF4136'\n                }\n              },\n              {\n                selector: '[type = \"claim\"]',\n                style: {\n                  'background-color': '#FF4136'\n                }\n              },\n              {\n                selector: '[type = \"Warrant\"]',\n                style: {\n                  'background-color': '#2ECC40'\n                }\n              },\n              {\n                selector: '[type = \"Rebuttal\"]',\n                style: {\n                  'background-color': '#FF851B'\n                }\n              },\n              {\n                selector: 'edge',\n                style: {\n                  'width': 2,\n                  'line-color': '#ccc',\n                  'target-arrow-shape': 'triangle',\n                  'target-arrow-color': '#ccc',\n                  'curve-style': 'bezier',\n                  'label': 'data(relationship)'\n                }\n              },\n              {\n                selector: '.highlighted',\n                style: {\n                  'line-color': '#FFD700',\n                  'target-arrow-color': '#FFD700',\n                  'width': 4\n                }\n              }\n            ],\n            layout: {\n              name: 'cose',\n              animate: true,\n              nodeDimensionsIncludeLabels: true,\n              refresh: 20,\n              fit: true,\n              padding: 30,\n              randomize: false,\n              componentSpacing: 100,\n              nodeRepulsion: 400000,\n              nodeOverlap: 10,\n              idealEdgeLength: 100,\n              edgeElasticity: 100,\n              nestingFactor: 5,\n              gravity: 80,\n              numIter: 1000,\n              initialTemp: 200,\n              coolingFactor: 0.95,\n              minTemp: 1.0\n            }\n          });\n          \n          cyRef.current = cy;\n          \n          console.log('Cytoscape initialized with elements:', cy.elements().length);\n  \n          // Node tooltips (Tippy.js)\n          cy.nodes().forEach(node => {\n            const ref = node.popperRef();\n            tippy(ref, {\n              content: `Type: ${node.data('type')}\\nDetails: ${node.data('details') || 'N/A'}`,\n              trigger: 'mouseenter',\n              placement: 'top',\n              arrow: true,\n              theme: 'light',\n            });\n          });\n  \n          // Edge hover highlight\n          cy.on('mouseover', 'edge', evt => {\n            evt.target.addClass('highlighted');\n          });\n          cy.on('mouseout', 'edge', evt => {\n            evt.target.removeClass('highlighted');\n          });\n  \n          // Clickable edge interactions\n          cy.on('tap', 'edge', evt => {\n            const edge = evt.target;\n            alert(`Relationship: ${edge.data('relationship')}\\nSource: ${edge.data('source')}\\nTarget: ${edge.data('target')}`);\n          });\n  \n          // Run layout\n          cy.layout({\n            name: 'cose',\n            animate: true,\n            nodeDimensionsIncludeLabels: true\n          }).run();\n        } catch (error) {\n          console.error('Error initializing Cytoscape:', error);\n          setError(`Error initializing visualization: ${error.message}`);\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching or processing DAG:', error);\n        setError(`Error loading visualization: ${error.message}`);\n        setLoading(false);\n      });\n      \n    // Cleanup function\n    return () => {\n      if (cyRef.current) {\n        cyRef.current.destroy();\n      }\n    };\n  }, []);\n\n  // Add event handlers for the filter buttons\n  useEffect(() => {\n    const filterClaimsBtn = document.getElementById('filter-claims');\n    const resetFilterBtn = document.getElementById('reset-filter');\n    \n    if (filterClaimsBtn && resetFilterBtn && cyRef.current) {\n      const handleFilterClaims = () => {\n        if (cyRef.current) {\n          cyRef.current.nodes().forEach(node => {\n            const type = node.data('type').toLowerCase();\n            node.style('display', type === 'claim' ? 'element' : 'none');\n          });\n        }\n      };\n      \n      const handleResetFilter = () => {\n        if (cyRef.current) {\n          cyRef.current.nodes().forEach(node => {\n            node.style('display', 'element');\n          });\n        }\n      };\n      \n      filterClaimsBtn.addEventListener('click', handleFilterClaims);\n      resetFilterBtn.addEventListener('click', handleResetFilter);\n      \n      return () => {\n        filterClaimsBtn.removeEventListener('click', handleFilterClaims);\n        resetFilterBtn.removeEventListener('click', handleResetFilter);\n      };\n    }\n  }, [cyRef.current]);\n\n  return (\n    <div className=\"dag-container\">\n      <div \n        ref={containerRef}\n        id=\"cy\" \n        style={{ \n          width: '100%', \n          height: '600px', \n          border: '1px solid #ccc',\n          position: 'relative'\n        }}\n      >\n        {loading && <div className=\"loading-message\">Loading visualization...</div>}\n        {error && <div className=\"error-message\">{error}</div>}\n      </div>\n      <div className=\"controls\">\n        <button id=\"filter-claims\">Show Only Claims</button>\n        <button id=\"reset-filter\">Reset Filter</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ArgumentDAG;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,SAAS,MAAM,WAAW;AACjC,OAAOC,KAAK,MAAM,UAAU;AAC5B,OAAO,yBAAyB;AAChC,OAAO,mBAAmB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,KAAK,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC1B,MAAMS,YAAY,GAAGT,MAAM,CAAC,IAAI,CAAC;EACjC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE5CF,SAAS,CAAC,MAAM;IACde,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;;IAE5C;IACA,IAAI,CAACN,YAAY,CAACO,OAAO,EAAE;MACzBF,OAAO,CAACJ,KAAK,CAAC,6BAA6B,CAAC;MAC5C;IACF;IAEAI,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;;IAEhD;IACAE,KAAK,CAAC,8CAA8C,EAAE;MACpDC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,WAAW,EAAE,kBAAkB;QAC/B,QAAQ,EAAE;MACZ,CAAC;MACDC,IAAI,EAAE;IACR,CAAC,CAAC,CACCC,IAAI,CAACC,QAAQ,IAAI;MAChBR,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEO,QAAQ,CAACC,MAAM,CAAC;MAChD,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8BH,QAAQ,CAACC,MAAM,EAAE,CAAC;MAClE;MACA,OAAOD,QAAQ,CAACI,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDL,IAAI,CAACM,IAAI,IAAI;MACZb,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEY,IAAI,CAAC;MACnCd,UAAU,CAAC,KAAK,CAAC;MAEjB,IAAI,CAACc,IAAI,CAACC,KAAK,IAAI,CAACD,IAAI,CAACE,KAAK,EAAE;QAC9Bf,OAAO,CAACJ,KAAK,CAAC,+BAA+B,EAAEiB,IAAI,CAAC;QACpDhB,QAAQ,CAAC,uCAAuC,CAAC;QACjD;MACF;MAEA,IAAIgB,IAAI,CAACC,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;QAC3BhB,OAAO,CAACiB,IAAI,CAAC,4BAA4B,CAAC;QAC1CpB,QAAQ,CAAC,oCAAoC,CAAC;QAC9C;MACF;;MAEA;MACA,IAAI;QACFG,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEN,YAAY,CAACO,OAAO,CAAC;QAE3E,MAAMgB,EAAE,GAAG9B,SAAS,CAAC;UACnB+B,SAAS,EAAExB,YAAY,CAACO,OAAO;UAC/BkB,QAAQ,EAAE,CACR,GAAGP,IAAI,CAACC,KAAK,CAACO,GAAG,CAACC,IAAI,KAAK;YACzBT,IAAI,EAAE;cACJU,EAAE,EAAED,IAAI,CAACC,EAAE;cACXC,KAAK,EAAEF,IAAI,CAACG,IAAI,IAAIH,IAAI,CAACE,KAAK;cAC9BE,IAAI,EAAEJ,IAAI,CAACI,IAAI,IAAIJ,IAAI,CAACE,KAAK;cAC7BG,OAAO,EAAEL,IAAI,CAACK,OAAO,IAAI;YAC3B;UACF,CAAC,CAAC,CAAC,EACH,GAAGd,IAAI,CAACE,KAAK,CAACM,GAAG,CAACO,IAAI,KAAK;YACzBf,IAAI,EAAE;cACJgB,MAAM,EAAED,IAAI,CAACC,MAAM;cACnBC,MAAM,EAAEF,IAAI,CAACE,MAAM;cACnBN,KAAK,EAAEI,IAAI,CAACF,IAAI;cAChBK,YAAY,EAAEH,IAAI,CAACF;YACrB;UACF,CAAC,CAAC,CAAC,CACJ;UACDM,KAAK,EAAE,CACL;YACEC,QAAQ,EAAE,MAAM;YAChBD,KAAK,EAAE;cACL,kBAAkB,EAAE,SAAS;cAC7B,OAAO,EAAE,aAAa;cACtB,aAAa,EAAE,QAAQ;cACvB,OAAO,EAAE,MAAM;cACf,WAAW,EAAE,MAAM;cACnB,cAAc,EAAE,CAAC;cACjB,cAAc,EAAE,MAAM;cACtB,OAAO,EAAE,GAAG;cACZ,QAAQ,EAAE,GAAG;cACb,WAAW,EAAE,MAAM;cACnB,gBAAgB,EAAE;YACpB;UACF,CAAC,EACD;YACEC,QAAQ,EAAE,kBAAkB;YAC5BD,KAAK,EAAE;cACL,kBAAkB,EAAE;YACtB;UACF,CAAC,EACD;YACEC,QAAQ,EAAE,kBAAkB;YAC5BD,KAAK,EAAE;cACL,kBAAkB,EAAE;YACtB;UACF,CAAC,EACD;YACEC,QAAQ,EAAE,oBAAoB;YAC9BD,KAAK,EAAE;cACL,kBAAkB,EAAE;YACtB;UACF,CAAC,EACD;YACEC,QAAQ,EAAE,qBAAqB;YAC/BD,KAAK,EAAE;cACL,kBAAkB,EAAE;YACtB;UACF,CAAC,EACD;YACEC,QAAQ,EAAE,MAAM;YAChBD,KAAK,EAAE;cACL,OAAO,EAAE,CAAC;cACV,YAAY,EAAE,MAAM;cACpB,oBAAoB,EAAE,UAAU;cAChC,oBAAoB,EAAE,MAAM;cAC5B,aAAa,EAAE,QAAQ;cACvB,OAAO,EAAE;YACX;UACF,CAAC,EACD;YACEC,QAAQ,EAAE,cAAc;YACxBD,KAAK,EAAE;cACL,YAAY,EAAE,SAAS;cACvB,oBAAoB,EAAE,SAAS;cAC/B,OAAO,EAAE;YACX;UACF,CAAC,CACF;UACDE,MAAM,EAAE;YACNC,IAAI,EAAE,MAAM;YACZC,OAAO,EAAE,IAAI;YACbC,2BAA2B,EAAE,IAAI;YACjCC,OAAO,EAAE,EAAE;YACXC,GAAG,EAAE,IAAI;YACTC,OAAO,EAAE,EAAE;YACXC,SAAS,EAAE,KAAK;YAChBC,gBAAgB,EAAE,GAAG;YACrBC,aAAa,EAAE,MAAM;YACrBC,WAAW,EAAE,EAAE;YACfC,eAAe,EAAE,GAAG;YACpBC,cAAc,EAAE,GAAG;YACnBC,aAAa,EAAE,CAAC;YAChBC,OAAO,EAAE,EAAE;YACXC,OAAO,EAAE,IAAI;YACbC,WAAW,EAAE,GAAG;YAChBC,aAAa,EAAE,IAAI;YACnBC,OAAO,EAAE;UACX;QACF,CAAC,CAAC;QAEF1D,KAAK,CAACQ,OAAO,GAAGgB,EAAE;QAElBlB,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEiB,EAAE,CAACE,QAAQ,CAAC,CAAC,CAACJ,MAAM,CAAC;;QAEzE;QACAE,EAAE,CAACJ,KAAK,CAAC,CAAC,CAACuC,OAAO,CAAC/B,IAAI,IAAI;UACzB,MAAMgC,GAAG,GAAGhC,IAAI,CAACiC,SAAS,CAAC,CAAC;UAC5BlE,KAAK,CAACiE,GAAG,EAAE;YACTE,OAAO,EAAE,SAASlC,IAAI,CAACT,IAAI,CAAC,MAAM,CAAC,cAAcS,IAAI,CAACT,IAAI,CAAC,SAAS,CAAC,IAAI,KAAK,EAAE;YAChF4C,OAAO,EAAE,YAAY;YACrBC,SAAS,EAAE,KAAK;YAChBC,KAAK,EAAE,IAAI;YACXC,KAAK,EAAE;UACT,CAAC,CAAC;QACJ,CAAC,CAAC;;QAEF;QACA1C,EAAE,CAAC2C,EAAE,CAAC,WAAW,EAAE,MAAM,EAAEC,GAAG,IAAI;UAChCA,GAAG,CAAChC,MAAM,CAACiC,QAAQ,CAAC,aAAa,CAAC;QACpC,CAAC,CAAC;QACF7C,EAAE,CAAC2C,EAAE,CAAC,UAAU,EAAE,MAAM,EAAEC,GAAG,IAAI;UAC/BA,GAAG,CAAChC,MAAM,CAACkC,WAAW,CAAC,aAAa,CAAC;QACvC,CAAC,CAAC;;QAEF;QACA9C,EAAE,CAAC2C,EAAE,CAAC,KAAK,EAAE,MAAM,EAAEC,GAAG,IAAI;UAC1B,MAAMlC,IAAI,GAAGkC,GAAG,CAAChC,MAAM;UACvBmC,KAAK,CAAC,iBAAiBrC,IAAI,CAACf,IAAI,CAAC,cAAc,CAAC,aAAae,IAAI,CAACf,IAAI,CAAC,QAAQ,CAAC,aAAae,IAAI,CAACf,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;QACrH,CAAC,CAAC;;QAEF;QACAK,EAAE,CAACgB,MAAM,CAAC;UACRC,IAAI,EAAE,MAAM;UACZC,OAAO,EAAE,IAAI;UACbC,2BAA2B,EAAE;QAC/B,CAAC,CAAC,CAAC6B,GAAG,CAAC,CAAC;MACV,CAAC,CAAC,OAAOtE,KAAK,EAAE;QACdI,OAAO,CAACJ,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrDC,QAAQ,CAAC,qCAAqCD,KAAK,CAACuE,OAAO,EAAE,CAAC;MAChE;IACF,CAAC,CAAC,CACDC,KAAK,CAACxE,KAAK,IAAI;MACdI,OAAO,CAACJ,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzDC,QAAQ,CAAC,gCAAgCD,KAAK,CAACuE,OAAO,EAAE,CAAC;MACzDpE,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;;IAEJ;IACA,OAAO,MAAM;MACX,IAAIL,KAAK,CAACQ,OAAO,EAAE;QACjBR,KAAK,CAACQ,OAAO,CAACmE,OAAO,CAAC,CAAC;MACzB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACApF,SAAS,CAAC,MAAM;IACd,MAAMqF,eAAe,GAAGC,QAAQ,CAACC,cAAc,CAAC,eAAe,CAAC;IAChE,MAAMC,cAAc,GAAGF,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC;IAE9D,IAAIF,eAAe,IAAIG,cAAc,IAAI/E,KAAK,CAACQ,OAAO,EAAE;MACtD,MAAMwE,kBAAkB,GAAGA,CAAA,KAAM;QAC/B,IAAIhF,KAAK,CAACQ,OAAO,EAAE;UACjBR,KAAK,CAACQ,OAAO,CAACY,KAAK,CAAC,CAAC,CAACuC,OAAO,CAAC/B,IAAI,IAAI;YACpC,MAAMI,IAAI,GAAGJ,IAAI,CAACT,IAAI,CAAC,MAAM,CAAC,CAAC8D,WAAW,CAAC,CAAC;YAC5CrD,IAAI,CAACU,KAAK,CAAC,SAAS,EAAEN,IAAI,KAAK,OAAO,GAAG,SAAS,GAAG,MAAM,CAAC;UAC9D,CAAC,CAAC;QACJ;MACF,CAAC;MAED,MAAMkD,iBAAiB,GAAGA,CAAA,KAAM;QAC9B,IAAIlF,KAAK,CAACQ,OAAO,EAAE;UACjBR,KAAK,CAACQ,OAAO,CAACY,KAAK,CAAC,CAAC,CAACuC,OAAO,CAAC/B,IAAI,IAAI;YACpCA,IAAI,CAACU,KAAK,CAAC,SAAS,EAAE,SAAS,CAAC;UAClC,CAAC,CAAC;QACJ;MACF,CAAC;MAEDsC,eAAe,CAACO,gBAAgB,CAAC,OAAO,EAAEH,kBAAkB,CAAC;MAC7DD,cAAc,CAACI,gBAAgB,CAAC,OAAO,EAAED,iBAAiB,CAAC;MAE3D,OAAO,MAAM;QACXN,eAAe,CAACQ,mBAAmB,CAAC,OAAO,EAAEJ,kBAAkB,CAAC;QAChED,cAAc,CAACK,mBAAmB,CAAC,OAAO,EAAEF,iBAAiB,CAAC;MAChE,CAAC;IACH;EACF,CAAC,EAAE,CAAClF,KAAK,CAACQ,OAAO,CAAC,CAAC;EAEnB,oBACEX,OAAA;IAAKwF,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5BzF,OAAA;MACE+D,GAAG,EAAE3D,YAAa;MAClB4B,EAAE,EAAC,IAAI;MACPS,KAAK,EAAE;QACLiD,KAAK,EAAE,MAAM;QACbC,MAAM,EAAE,OAAO;QACfC,MAAM,EAAE,gBAAgB;QACxBC,QAAQ,EAAE;MACZ,CAAE;MAAAJ,QAAA,GAEDlF,OAAO,iBAAIP,OAAA;QAAKwF,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAC;MAAwB;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EAC1E5F,KAAK,iBAAIL,OAAA;QAAKwF,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAEpF;MAAK;QAAAyF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CAAC,eACNjG,OAAA;MAAKwF,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACvBzF,OAAA;QAAQgC,EAAE,EAAC,eAAe;QAAAyD,QAAA,EAAC;MAAgB;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACpDjG,OAAA;QAAQgC,EAAE,EAAC,cAAc;QAAAyD,QAAA,EAAC;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC/F,EAAA,CAzQID,WAAW;AAAAiG,EAAA,GAAXjG,WAAW;AA2QjB,eAAeA,WAAW;AAAC,IAAAiG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/robertford/Repos/rational-onion/frontend/src/ArgumentDAG.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport cytoscape from 'cytoscape';\nimport tippy from 'tippy.js';\nimport 'tippy.js/dist/tippy.css';\nimport './ArgumentDAG.css'; // If you want separate styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ArgumentDAG = () => {\n  _s();\n  const cyRef = useRef(null);\n  useEffect(() => {\n    console.log('Initializing visualization...');\n\n    // Make sure the container is available\n    const container = document.getElementById('cy');\n    if (!container) {\n      console.error('Container ref not available');\n      return;\n    }\n    console.log('Container found, fetching data...');\n\n    // Replace with your local or deployed API address\n    fetch('http://localhost:8000/visualize-argument-dag', {\n      headers: {\n        'X-API-Key': 'test_api_key_123'\n      }\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`API responded with status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      console.log('Data received:', data);\n      if (!data.nodes || !data.edges) {\n        console.error('Invalid data format received:', data);\n        return;\n      }\n\n      // Initialize Cytoscape\n      const cy = cytoscape({\n        container: container,\n        elements: [...data.nodes.map(node => ({\n          data: {\n            id: node.id,\n            label: node.text || node.label,\n            type: node.type || node.label,\n            details: node.details || ''\n          }\n        })), ...data.edges.map(edge => ({\n          data: {\n            source: edge.source,\n            target: edge.target,\n            label: edge.type,\n            relationship: edge.type\n          }\n        }))],\n        style: [{\n          selector: 'node',\n          style: {\n            'background-color': '#0074D9',\n            'label': 'data(label)',\n            'text-valign': 'center',\n            'color': '#fff',\n            'font-size': '12px',\n            'border-width': 2,\n            'border-color': '#fff',\n            'width': 100,\n            'height': 100,\n            'text-wrap': 'wrap',\n            'text-max-width': '80px'\n          }\n        }, {\n          selector: '[type = \"Claim\"]',\n          style: {\n            'background-color': '#FF4136'\n          }\n        }, {\n          selector: '[type = \"claim\"]',\n          style: {\n            'background-color': '#FF4136'\n          }\n        }, {\n          selector: '[type = \"Warrant\"]',\n          style: {\n            'background-color': '#2ECC40'\n          }\n        }, {\n          selector: '[type = \"Rebuttal\"]',\n          style: {\n            'background-color': '#FF851B'\n          }\n        }, {\n          selector: 'edge',\n          style: {\n            'width': 2,\n            'line-color': '#ccc',\n            'target-arrow-shape': 'triangle',\n            'target-arrow-color': '#ccc',\n            'curve-style': 'bezier'\n          }\n        }, {\n          selector: '.highlighted',\n          style: {\n            'line-color': '#FFD700',\n            'target-arrow-color': '#FFD700',\n            'width': 4\n          }\n        }],\n        layout: data.layout || {\n          name: 'cose',\n          animate: true,\n          nodeDimensionsIncludeLabels: true,\n          refresh: 20,\n          fit: true,\n          padding: 30,\n          randomize: false,\n          componentSpacing: 100,\n          nodeRepulsion: 400000,\n          nodeOverlap: 10,\n          idealEdgeLength: 100,\n          edgeElasticity: 100,\n          nestingFactor: 5,\n          gravity: 80,\n          numIter: 1000,\n          initialTemp: 200,\n          coolingFactor: 0.95,\n          minTemp: 1.0\n        }\n      });\n      cyRef.current = cy;\n      console.log('Cytoscape initialized with elements:', cy.elements().length);\n\n      // Node tooltips (Tippy.js)\n      cy.nodes().forEach(node => {\n        const ref = node.popperRef();\n        tippy(ref, {\n          content: `Type: ${node.data('type')}\\nDetails: ${node.data('details') || 'N/A'}`,\n          trigger: 'mouseenter',\n          placement: 'top',\n          arrow: true,\n          theme: 'light'\n        });\n      });\n\n      // Edge hover highlight\n      cy.on('mouseover', 'edge', evt => {\n        evt.target.addClass('highlighted');\n      });\n      cy.on('mouseout', 'edge', evt => {\n        evt.target.removeClass('highlighted');\n      });\n\n      // Clickable edge interactions\n      cy.on('tap', 'edge', evt => {\n        const edge = evt.target;\n        alert(`Relationship: ${edge.data('relationship')}\\nSource: ${edge.data('source')}\\nTarget: ${edge.data('target')}`);\n      });\n\n      // Run layout\n      cy.layout(data.layout || {\n        name: 'cose'\n      }).run();\n    }).catch(error => {\n      console.error('Error fetching or processing DAG:', error);\n      document.getElementById('cy').innerHTML = `<div class=\"error-message\">Error loading visualization: ${error.message}</div>`;\n    });\n\n    // Cleanup function\n    return () => {\n      if (cyRef.current) {\n        cyRef.current.destroy();\n      }\n    };\n  }, []);\n\n  // Add event handlers for the filter buttons\n  useEffect(() => {\n    const filterClaimsBtn = document.getElementById('filter-claims');\n    const resetFilterBtn = document.getElementById('reset-filter');\n    if (filterClaimsBtn && resetFilterBtn) {\n      const handleFilterClaims = () => {\n        if (cyRef.current) {\n          cyRef.current.nodes().forEach(node => {\n            const type = node.data('type').toLowerCase();\n            node.style('display', type === 'claim' ? 'element' : 'none');\n          });\n        }\n      };\n      const handleResetFilter = () => {\n        if (cyRef.current) {\n          cyRef.current.nodes().forEach(node => {\n            node.style('display', 'element');\n          });\n        }\n      };\n      filterClaimsBtn.addEventListener('click', handleFilterClaims);\n      resetFilterBtn.addEventListener('click', handleResetFilter);\n      return () => {\n        filterClaimsBtn.removeEventListener('click', handleFilterClaims);\n        resetFilterBtn.removeEventListener('click', handleResetFilter);\n      };\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dag-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"cy\",\n      style: {\n        width: '100%',\n        height: '600px',\n        border: '1px solid #ccc'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"filter-claims\",\n        children: \"Show Only Claims\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"reset-filter\",\n        children: \"Reset Filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 5\n  }, this);\n};\n_s(ArgumentDAG, \"o0WYFu/Of9XIr/1fmBihigEbQQI=\");\n_c = ArgumentDAG;\nexport default ArgumentDAG;\nvar _c;\n$RefreshReg$(_c, \"ArgumentDAG\");","map":{"version":3,"names":["React","useEffect","useRef","cytoscape","tippy","jsxDEV","_jsxDEV","ArgumentDAG","_s","cyRef","console","log","container","document","getElementById","error","fetch","headers","then","response","ok","Error","status","json","data","nodes","edges","cy","elements","map","node","id","label","text","type","details","edge","source","target","relationship","style","selector","layout","name","animate","nodeDimensionsIncludeLabels","refresh","fit","padding","randomize","componentSpacing","nodeRepulsion","nodeOverlap","idealEdgeLength","edgeElasticity","nestingFactor","gravity","numIter","initialTemp","coolingFactor","minTemp","current","length","forEach","ref","popperRef","content","trigger","placement","arrow","theme","on","evt","addClass","removeClass","alert","run","catch","innerHTML","message","destroy","filterClaimsBtn","resetFilterBtn","handleFilterClaims","toLowerCase","handleResetFilter","addEventListener","removeEventListener","className","children","width","height","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/robertford/Repos/rational-onion/frontend/src/ArgumentDAG.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport cytoscape from 'cytoscape';\nimport tippy from 'tippy.js';\nimport 'tippy.js/dist/tippy.css';\nimport './ArgumentDAG.css'; // If you want separate styling\n\nconst ArgumentDAG = () => {\n  const cyRef = useRef(null);\n  \n  useEffect(() => {\n    console.log('Initializing visualization...');\n    \n    // Make sure the container is available\n    const container = document.getElementById('cy');\n    if (!container) {\n      console.error('Container ref not available');\n      return;\n    }\n    \n    console.log('Container found, fetching data...');\n    \n    // Replace with your local or deployed API address\n    fetch('http://localhost:8000/visualize-argument-dag', {\n      headers: {\n        'X-API-Key': 'test_api_key_123'\n      }\n    })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`API responded with status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(data => {\n        console.log('Data received:', data);\n        \n        if (!data.nodes || !data.edges) {\n          console.error('Invalid data format received:', data);\n          return;\n        }\n        \n        // Initialize Cytoscape\n        const cy = cytoscape({\n          container: container,\n          elements: [\n            ...data.nodes.map(node => ({\n              data: {\n                id: node.id,\n                label: node.text || node.label,\n                type: node.type || node.label,\n                details: node.details || ''\n              }\n            })),\n            ...data.edges.map(edge => ({\n              data: {\n                source: edge.source,\n                target: edge.target,\n                label: edge.type,\n                relationship: edge.type\n              }\n            }))\n          ],\n          style: [\n            {\n              selector: 'node',\n              style: {\n                'background-color': '#0074D9',\n                'label': 'data(label)',\n                'text-valign': 'center',\n                'color': '#fff',\n                'font-size': '12px',\n                'border-width': 2,\n                'border-color': '#fff',\n                'width': 100,\n                'height': 100,\n                'text-wrap': 'wrap',\n                'text-max-width': '80px'\n              }\n            },\n            {\n              selector: '[type = \"Claim\"]',\n              style: {\n                'background-color': '#FF4136'\n              }\n            },\n            {\n              selector: '[type = \"claim\"]',\n              style: {\n                'background-color': '#FF4136'\n              }\n            },\n            {\n              selector: '[type = \"Warrant\"]',\n              style: {\n                'background-color': '#2ECC40'\n              }\n            },\n            {\n              selector: '[type = \"Rebuttal\"]',\n              style: {\n                'background-color': '#FF851B'\n              }\n            },\n            {\n              selector: 'edge',\n              style: {\n                'width': 2,\n                'line-color': '#ccc',\n                'target-arrow-shape': 'triangle',\n                'target-arrow-color': '#ccc',\n                'curve-style': 'bezier'\n              }\n            },\n            {\n              selector: '.highlighted',\n              style: {\n                'line-color': '#FFD700',\n                'target-arrow-color': '#FFD700',\n                'width': 4\n              }\n            }\n          ],\n          layout: data.layout || {\n            name: 'cose',\n            animate: true,\n            nodeDimensionsIncludeLabels: true,\n            refresh: 20,\n            fit: true,\n            padding: 30,\n            randomize: false,\n            componentSpacing: 100,\n            nodeRepulsion: 400000,\n            nodeOverlap: 10,\n            idealEdgeLength: 100,\n            edgeElasticity: 100,\n            nestingFactor: 5,\n            gravity: 80,\n            numIter: 1000,\n            initialTemp: 200,\n            coolingFactor: 0.95,\n            minTemp: 1.0\n          }\n        });\n        \n        cyRef.current = cy;\n        \n        console.log('Cytoscape initialized with elements:', cy.elements().length);\n\n        // Node tooltips (Tippy.js)\n        cy.nodes().forEach(node => {\n          const ref = node.popperRef();\n          tippy(ref, {\n            content: `Type: ${node.data('type')}\\nDetails: ${node.data('details') || 'N/A'}`,\n            trigger: 'mouseenter',\n            placement: 'top',\n            arrow: true,\n            theme: 'light',\n          });\n        });\n\n        // Edge hover highlight\n        cy.on('mouseover', 'edge', evt => {\n          evt.target.addClass('highlighted');\n        });\n        cy.on('mouseout', 'edge', evt => {\n          evt.target.removeClass('highlighted');\n        });\n\n        // Clickable edge interactions\n        cy.on('tap', 'edge', evt => {\n          const edge = evt.target;\n          alert(`Relationship: ${edge.data('relationship')}\\nSource: ${edge.data('source')}\\nTarget: ${edge.data('target')}`);\n        });\n\n        // Run layout\n        cy.layout(data.layout || { name: 'cose' }).run();\n      })\n      .catch(error => {\n        console.error('Error fetching or processing DAG:', error);\n        document.getElementById('cy').innerHTML = `<div class=\"error-message\">Error loading visualization: ${error.message}</div>`;\n      });\n      \n    // Cleanup function\n    return () => {\n      if (cyRef.current) {\n        cyRef.current.destroy();\n      }\n    };\n  }, []);\n\n  // Add event handlers for the filter buttons\n  useEffect(() => {\n    const filterClaimsBtn = document.getElementById('filter-claims');\n    const resetFilterBtn = document.getElementById('reset-filter');\n    \n    if (filterClaimsBtn && resetFilterBtn) {\n      const handleFilterClaims = () => {\n        if (cyRef.current) {\n          cyRef.current.nodes().forEach(node => {\n            const type = node.data('type').toLowerCase();\n            node.style('display', type === 'claim' ? 'element' : 'none');\n          });\n        }\n      };\n      \n      const handleResetFilter = () => {\n        if (cyRef.current) {\n          cyRef.current.nodes().forEach(node => {\n            node.style('display', 'element');\n          });\n        }\n      };\n      \n      filterClaimsBtn.addEventListener('click', handleFilterClaims);\n      resetFilterBtn.addEventListener('click', handleResetFilter);\n      \n      return () => {\n        filterClaimsBtn.removeEventListener('click', handleFilterClaims);\n        resetFilterBtn.removeEventListener('click', handleResetFilter);\n      };\n    }\n  }, []);\n\n  return (\n    <div className=\"dag-container\">\n      <div id=\"cy\" style={{ width: '100%', height: '600px', border: '1px solid #ccc' }}></div>\n      <div className=\"controls\">\n        <button id=\"filter-claims\">Show Only Claims</button>\n        <button id=\"reset-filter\">Reset Filter</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ArgumentDAG;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
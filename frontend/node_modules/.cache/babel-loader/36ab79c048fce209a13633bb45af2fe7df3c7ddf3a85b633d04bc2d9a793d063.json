{"ast":null,"code":"var _jsxFileName = \"/Users/robertford/Repos/rational-onion/frontend/src/ArgumentDAG.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport cytoscape from 'cytoscape';\nimport dagre from 'cytoscape-dagre';\nimport './ArgumentDAG.css';\n\n// Register dagre layout\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ncytoscape.use(dagre);\n\n// Use environment variable or fallback to default\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\nconst API_KEY = process.env.REACT_APP_API_KEY || 'test_api_key_123';\nconst ArgumentDAG = () => {\n  _s();\n  const containerRef = useRef(null);\n  const cyRef = useRef(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [graphStats, setGraphStats] = useState({\n    nodeCount: 0,\n    edgeCount: 0,\n    lastUpdated: null\n  });\n  const fetchData = useCallback(async () => {\n    if (!containerRef.current) {\n      console.error('Container ref is not available');\n      setError('Visualization container is not ready');\n      setLoading(false);\n      return;\n    }\n    try {\n      console.log('Starting data fetch - Container ref is available');\n      setLoading(true);\n      setError(null);\n      const visualizationUrl = `${API_BASE_URL}/visualize-argument-dag`;\n\n      // Detailed logging for fetch configuration\n      console.log('Fetch Configuration:', {\n        url: visualizationUrl,\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-API-Key': API_KEY\n        }\n      });\n      const response = await fetch(visualizationUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-API-Key': API_KEY\n        }\n      });\n      console.log('Fetch Response:', {\n        status: response.status,\n        statusText: response.statusText,\n        headers: Object.fromEntries(response.headers.entries())\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Fetch Error Response:', errorText);\n        console.error('API Key used:', API_KEY);\n        console.error('API URL used:', visualizationUrl);\n        setError(`HTTP error! status: ${response.status}, message: ${errorText}`);\n        setLoading(false);\n        return;\n      }\n      const data = await response.json();\n      console.log('Parsed JSON Data:', data);\n\n      // Validate data structure\n      if (!data || !data.nodes || !data.edges) {\n        console.warn('Received invalid data structure:', data);\n        setError('Invalid graph data received');\n        setLoading(false);\n        return;\n      }\n\n      // Log node and edge details\n      console.log('Nodes:', data.nodes);\n      console.log('Edges:', data.edges);\n\n      // Prepare Cytoscape elements\n      const cytoscapeElements = [...data.nodes.map(node => ({\n        data: {\n          id: node.id,\n          label: node.label || node.text || 'Unnamed Node',\n          type: node.type || 'unknown',\n          details: node.details || ''\n        }\n      })), ...data.edges.map(edge => ({\n        data: {\n          source: edge.source,\n          target: edge.target,\n          type: edge.type || 'unspecified'\n        }\n      }))];\n      console.log('Cytoscape Elements:', cytoscapeElements);\n\n      // Update graph statistics\n      setGraphStats({\n        nodeCount: data.nodes.length,\n        edgeCount: data.edges.length,\n        lastUpdated: new Date().toISOString()\n      });\n\n      // Initialize or update Cytoscape\n      if (cyRef.current) {\n        cyRef.current.destroy();\n      }\n\n      // Make sure container is properly sized before initializing Cytoscape\n      console.log('Container dimensions:', {\n        width: containerRef.current.offsetWidth,\n        height: containerRef.current.offsetHeight\n      });\n      cyRef.current = cytoscape({\n        container: containerRef.current,\n        elements: cytoscapeElements,\n        style: [{\n          selector: 'node',\n          style: {\n            'background-color': ele => {\n              switch (ele.data('type')) {\n                case 'claim':\n                  return '#3498db';\n                // Blue for claims\n                case 'ground':\n                  return '#2ecc71';\n                // Green for grounds\n                case 'warrant':\n                  return '#e74c3c';\n                // Red for warrants\n                default:\n                  return '#666';\n                // Default gray\n              }\n            },\n            'shape': 'rectangle',\n            // Change from default ellipse to rectangle\n            'label': 'data(label)',\n            'color': '#fff',\n            'text-valign': 'center',\n            'text-halign': 'center',\n            'width': 140,\n            // Slightly increased for squares\n            'height': 80,\n            // Adjusted height for square-ish shape\n            'font-size': '12px',\n            'text-wrap': 'wrap',\n            'text-max-width': 120,\n            'border-width': 2,\n            'border-color': '#2c3e50',\n            'border-opacity': 0.7,\n            'border-radius': 5 // Add slight rounding to corners\n          }\n        }, {\n          selector: 'edge',\n          style: {\n            'width': 3,\n            'line-color': '#95a5a6',\n            'target-arrow-color': '#7f8c8d',\n            'target-arrow-shape': 'triangle',\n            'curve-style': 'bezier',\n            'arrow-scale': 1.5,\n            'label': 'data(type)'\n          }\n        }],\n        layout: {\n          name: 'dagre',\n          // More structured layout for DAGs\n          rankDir: 'TB',\n          // Top to Bottom direction\n          spacingFactor: 1.5,\n          // More spacing between nodes\n          nodeSep: 60,\n          // Separation between nodes\n          edgeSep: 40,\n          // Separation between edges\n          rankSep: 120,\n          // Separation between ranks (levels)\n          fit: true,\n          // Fit the graph to the container\n          padding: 50 // Padding around the graph\n        },\n        minZoom: 0.5,\n        maxZoom: 2.0,\n        wheelSensitivity: 0.2\n      });\n\n      // Force a resize after initialization\n      setTimeout(() => {\n        if (cyRef.current) {\n          cyRef.current.resize();\n          cyRef.current.fit();\n        }\n      }, 100);\n      setLoading(false);\n    } catch (err) {\n      console.error('Comprehensive Fetch Error:', {\n        message: err.message,\n        name: err.name,\n        stack: err.stack\n      });\n      setError(`Error loading visualization: ${err.message}`);\n      setLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    fetchData();\n\n    // Add resize handler to ensure responsiveness\n    const handleResize = () => {\n      if (cyRef.current) {\n        cyRef.current.resize();\n        cyRef.current.fit();\n      }\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup function\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (cyRef.current) {\n        cyRef.current.destroy();\n      }\n    };\n  }, [fetchData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dag-container\",\n    children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this), \"Initializing visualization...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Error:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this), \" \", error, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: \"Please check the console for more details.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filter-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"filter-claims\",\n        className: \"filter-btn\",\n        onClick: () => {\n          if (cyRef.current) {\n            cyRef.current.nodes().forEach(node => {\n              node.style('opacity', node.data('type') === 'claim' ? 1 : 0.3);\n            });\n          }\n        },\n        children: \"Filter Claims\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"reset-filter\",\n        className: \"filter-btn\",\n        onClick: () => {\n          if (cyRef.current) {\n            cyRef.current.nodes().style('opacity', 1);\n          }\n        },\n        children: \"Reset Filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      className: \"cytoscape-container\",\n      style: {\n        display: loading || error ? 'none' : 'block',\n        height: '500px',\n        // Explicit height\n        border: '1px solid #ddd',\n        borderRadius: '5px',\n        overflow: 'hidden',\n        margin: '10px 0'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), !loading && !error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-stats\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Nodes: \", graphStats.nodeCount, \" | Edges: \", graphStats.edgeCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Last Updated: \", new Date(graphStats.lastUpdated).toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n};\n_s(ArgumentDAG, \"YqvmEvKeqoBlSmvcWiAFXvvezWw=\");\n_c = ArgumentDAG;\nexport default ArgumentDAG;\nvar _c;\n$RefreshReg$(_c, \"ArgumentDAG\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useCallback","cytoscape","dagre","jsxDEV","_jsxDEV","use","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","API_KEY","REACT_APP_API_KEY","ArgumentDAG","_s","containerRef","cyRef","error","setError","loading","setLoading","graphStats","setGraphStats","nodeCount","edgeCount","lastUpdated","fetchData","current","console","log","visualizationUrl","url","method","headers","response","fetch","status","statusText","Object","fromEntries","entries","ok","errorText","text","data","json","nodes","edges","warn","cytoscapeElements","map","node","id","label","type","details","edge","source","target","length","Date","toISOString","destroy","width","offsetWidth","height","offsetHeight","container","elements","style","selector","ele","layout","name","rankDir","spacingFactor","nodeSep","edgeSep","rankSep","fit","padding","minZoom","maxZoom","wheelSensitivity","setTimeout","resize","err","message","stack","handleResize","window","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","forEach","ref","display","border","borderRadius","overflow","margin","toLocaleString","_c","$RefreshReg$"],"sources":["/Users/robertford/Repos/rational-onion/frontend/src/ArgumentDAG.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport cytoscape from 'cytoscape';\nimport dagre from 'cytoscape-dagre';\nimport './ArgumentDAG.css';\n\n// Register dagre layout\ncytoscape.use(dagre);\n\n// Use environment variable or fallback to default\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\nconst API_KEY = process.env.REACT_APP_API_KEY || 'test_api_key_123';\n\nconst ArgumentDAG = () => {\n  const containerRef = useRef(null);\n  const cyRef = useRef(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [graphStats, setGraphStats] = useState({\n    nodeCount: 0,\n    edgeCount: 0,\n    lastUpdated: null\n  });\n\n  const fetchData = useCallback(async () => {\n    if (!containerRef.current) {\n      console.error('Container ref is not available');\n      setError('Visualization container is not ready');\n      setLoading(false);\n      return;\n    }\n\n    try {\n      console.log('Starting data fetch - Container ref is available');\n      setLoading(true);\n      setError(null);\n\n      const visualizationUrl = `${API_BASE_URL}/visualize-argument-dag`;\n\n      // Detailed logging for fetch configuration\n      console.log('Fetch Configuration:', {\n        url: visualizationUrl,\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-API-Key': API_KEY\n        }\n      });\n\n      const response = await fetch(visualizationUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-API-Key': API_KEY\n        }\n      });\n\n      console.log('Fetch Response:', {\n        status: response.status,\n        statusText: response.statusText,\n        headers: Object.fromEntries(response.headers.entries())\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Fetch Error Response:', errorText);\n        console.error('API Key used:', API_KEY);\n        console.error('API URL used:', visualizationUrl);\n        setError(`HTTP error! status: ${response.status}, message: ${errorText}`);\n        setLoading(false);\n        return;\n      }\n\n      const data = await response.json();\n      console.log('Parsed JSON Data:', data);\n\n      // Validate data structure\n      if (!data || !data.nodes || !data.edges) {\n        console.warn('Received invalid data structure:', data);\n        setError('Invalid graph data received');\n        setLoading(false);\n        return;\n      }\n\n      // Log node and edge details\n      console.log('Nodes:', data.nodes);\n      console.log('Edges:', data.edges);\n\n      // Prepare Cytoscape elements\n      const cytoscapeElements = [\n        ...data.nodes.map(node => ({\n          data: {\n            id: node.id,\n            label: node.label || node.text || 'Unnamed Node',\n            type: node.type || 'unknown',\n            details: node.details || ''\n          }\n        })),\n        ...data.edges.map(edge => ({\n          data: {\n            source: edge.source,\n            target: edge.target,\n            type: edge.type || 'unspecified'\n          }\n        }))\n      ];\n\n      console.log('Cytoscape Elements:', cytoscapeElements);\n\n      // Update graph statistics\n      setGraphStats({\n        nodeCount: data.nodes.length,\n        edgeCount: data.edges.length,\n        lastUpdated: new Date().toISOString()\n      });\n\n      // Initialize or update Cytoscape\n      if (cyRef.current) {\n        cyRef.current.destroy();\n      }\n\n      // Make sure container is properly sized before initializing Cytoscape\n      console.log('Container dimensions:', {\n        width: containerRef.current.offsetWidth,\n        height: containerRef.current.offsetHeight\n      });\n\n      cyRef.current = cytoscape({\n        container: containerRef.current,\n        elements: cytoscapeElements,\n        style: [\n          {\n            selector: 'node',\n            style: {\n              'background-color': (ele) => {\n                switch(ele.data('type')) {\n                  case 'claim': return '#3498db';  // Blue for claims\n                  case 'ground': return '#2ecc71';  // Green for grounds\n                  case 'warrant': return '#e74c3c';  // Red for warrants\n                  default: return '#666';  // Default gray\n                }\n              },\n              'shape': 'rectangle',  // Change from default ellipse to rectangle\n              'label': 'data(label)',\n              'color': '#fff',\n              'text-valign': 'center',\n              'text-halign': 'center',\n              'width': 140,  // Slightly increased for squares\n              'height': 80,  // Adjusted height for square-ish shape\n              'font-size': '12px',\n              'text-wrap': 'wrap',\n              'text-max-width': 120,\n              'border-width': 2,\n              'border-color': '#2c3e50',\n              'border-opacity': 0.7,\n              'border-radius': 5  // Add slight rounding to corners\n            }\n          },\n          {\n            selector: 'edge',\n            style: {\n              'width': 3,\n              'line-color': '#95a5a6',\n              'target-arrow-color': '#7f8c8d',\n              'target-arrow-shape': 'triangle',\n              'curve-style': 'bezier',\n              'arrow-scale': 1.5,\n              'label': 'data(type)'\n            }\n          }\n        ],\n        layout: {\n          name: 'dagre',  // More structured layout for DAGs\n          rankDir: 'TB',  // Top to Bottom direction\n          spacingFactor: 1.5,  // More spacing between nodes\n          nodeSep: 60,  // Separation between nodes\n          edgeSep: 40,  // Separation between edges\n          rankSep: 120,  // Separation between ranks (levels)\n          fit: true,     // Fit the graph to the container\n          padding: 50    // Padding around the graph\n        },\n        minZoom: 0.5,\n        maxZoom: 2.0,\n        wheelSensitivity: 0.2\n      });\n\n      // Force a resize after initialization\n      setTimeout(() => {\n        if (cyRef.current) {\n          cyRef.current.resize();\n          cyRef.current.fit();\n        }\n      }, 100);\n\n      setLoading(false);\n    } catch (err) {\n      console.error('Comprehensive Fetch Error:', {\n        message: err.message,\n        name: err.name,\n        stack: err.stack\n      });\n      setError(`Error loading visualization: ${err.message}`);\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n\n    // Add resize handler to ensure responsiveness\n    const handleResize = () => {\n      if (cyRef.current) {\n        cyRef.current.resize();\n        cyRef.current.fit();\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup function\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (cyRef.current) {\n        cyRef.current.destroy();\n      }\n    };\n  }, [fetchData]);\n\n  return (\n    <div className=\"dag-container\">\n      {loading && (\n        <div className=\"loading-message\">\n          <div className=\"loading-spinner\"></div>\n          Initializing visualization...\n        </div>\n      )}\n      \n      {error && (\n        <div className=\"error-message\">\n          <strong>Error:</strong> {error}\n          <br />\n          <small>Please check the console for more details.</small>\n        </div>\n      )}\n      \n      <div className=\"filter-controls\">\n        <button \n          id=\"filter-claims\" \n          className=\"filter-btn\"\n          onClick={() => {\n            if (cyRef.current) {\n              cyRef.current.nodes().forEach(node => {\n                node.style('opacity', node.data('type') === 'claim' ? 1 : 0.3);\n              });\n            }\n          }}\n        >\n          Filter Claims\n        </button>\n        <button \n          id=\"reset-filter\" \n          className=\"filter-btn\"\n          onClick={() => {\n            if (cyRef.current) {\n              cyRef.current.nodes().style('opacity', 1);\n            }\n          }}\n        >\n          Reset Filter\n        </button>\n      </div>\n\n      <div \n        ref={containerRef} \n        className=\"cytoscape-container\"\n        style={{ \n          display: loading || error ? 'none' : 'block',\n          height: '500px', // Explicit height\n          border: '1px solid #ddd',\n          borderRadius: '5px',\n          overflow: 'hidden',\n          margin: '10px 0'\n        }}\n      ></div>\n      \n      {!loading && !error && (\n        <div className=\"graph-stats\">\n          <p>Nodes: {graphStats.nodeCount} | Edges: {graphStats.edgeCount}</p>\n          <p>Last Updated: {new Date(graphStats.lastUpdated).toLocaleString()}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ArgumentDAG;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
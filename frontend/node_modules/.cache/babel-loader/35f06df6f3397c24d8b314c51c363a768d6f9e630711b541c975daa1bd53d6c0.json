{"ast":null,"code":"var _jsxFileName = \"/Users/robertford/Repos/rational-onion/frontend/src/ArgumentDAG.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport cytoscape from 'cytoscape';\nimport tippy from 'tippy.js';\nimport 'tippy.js/dist/tippy.css';\nimport './ArgumentDAG.css'; // If you want separate styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ArgumentDAG = () => {\n  _s();\n  const containerRef = useRef(null);\n  const cyRef = useRef(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Check if container is available\n        if (!containerRef.current) {\n          console.error(\"Container ref not available\");\n          setError(\"Container reference not available. Please try refreshing the page.\");\n          setLoading(false);\n          return;\n        }\n        console.log(\"Container ref available, fetching data...\");\n        const response = await fetch('http://localhost:8000/visualize-argument-dag', {\n          method: 'GET',\n          headers: {\n            'X-API-Key': 'test_api_key_123',\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          mode: 'cors',\n          credentials: 'same-origin'\n        });\n        if (!response.ok) {\n          throw new Error(`API responded with status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(\"Data received:\", data);\n        if (!data || !data.nodes || !data.edges || data.nodes.length === 0) {\n          setError(\"No graph data available. The API returned empty data.\");\n          setLoading(false);\n          return;\n        }\n\n        // Initialize Cytoscape\n        cyRef.current = cytoscape({\n          container: containerRef.current,\n          elements: {\n            nodes: data.nodes,\n            edges: data.edges\n          },\n          style: [{\n            selector: 'node',\n            style: {\n              'background-color': '#FF4136',\n              'label': 'data(label)',\n              'text-valign': 'center',\n              'color': '#fff',\n              'font-size': '12px',\n              'width': 80,\n              'height': 80,\n              'text-wrap': 'wrap'\n            }\n          }, {\n            selector: 'edge',\n            style: {\n              'width': 2,\n              'line-color': '#ccc',\n              'target-arrow-shape': 'triangle',\n              'target-arrow-color': '#ccc',\n              'curve-style': 'bezier',\n              'label': 'data(label)'\n            }\n          }],\n          layout: data.layout || {\n            name: 'cose',\n            animate: true,\n            nodeDimensionsIncludeLabels: true\n          }\n        });\n\n        // Add event listeners for filtering\n        const filterByClaim = claimType => {\n          cyRef.current.nodes().forEach(node => {\n            if (node.data('type') === claimType) {\n              node.style('opacity', 1);\n            } else {\n              node.style('opacity', 0.3);\n            }\n          });\n        };\n        const resetFilter = () => {\n          cyRef.current.nodes().style('opacity', 1);\n        };\n\n        // Add event listeners to buttons if they exist\n        const claimFilterBtn = document.getElementById('filter-claims');\n        const resetFilterBtn = document.getElementById('reset-filter');\n        if (claimFilterBtn) {\n          claimFilterBtn.addEventListener('click', () => filterByClaim('claim'));\n        }\n        if (resetFilterBtn) {\n          resetFilterBtn.addEventListener('click', resetFilter);\n        }\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error loading visualization:\", err);\n        setError(`Error loading visualization: ${err.message}`);\n        setLoading(false);\n      }\n    };\n    fetchData();\n\n    // Cleanup function\n    return () => {\n      if (cyRef.current) {\n        cyRef.current.destroy();\n      }\n\n      // Remove event listeners\n      const claimFilterBtn = document.getElementById('filter-claims');\n      const resetFilterBtn = document.getElementById('reset-filter');\n      if (claimFilterBtn) {\n        claimFilterBtn.removeEventListener('click', () => {});\n      }\n      if (resetFilterBtn) {\n        resetFilterBtn.removeEventListener('click', () => {});\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dag-container\",\n    children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-message\",\n      children: \"Initializing visualization...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      className: \"cytoscape-container\",\n      style: {\n        width: '100%',\n        height: '600px',\n        display: loading || error ? 'none' : 'block'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(ArgumentDAG, \"9wJ3LNg33cX5/lRY1EGO5f8p/aU=\");\n_c = ArgumentDAG;\nexport default ArgumentDAG;\nvar _c;\n$RefreshReg$(_c, \"ArgumentDAG\");","map":{"version":3,"names":["React","useEffect","useRef","useState","cytoscape","tippy","jsxDEV","_jsxDEV","ArgumentDAG","_s","containerRef","cyRef","error","setError","loading","setLoading","fetchData","current","console","log","response","fetch","method","headers","mode","credentials","ok","Error","status","data","json","nodes","edges","length","container","elements","style","selector","layout","name","animate","nodeDimensionsIncludeLabels","filterByClaim","claimType","forEach","node","resetFilter","claimFilterBtn","document","getElementById","resetFilterBtn","addEventListener","err","message","destroy","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","width","height","display","_c","$RefreshReg$"],"sources":["/Users/robertford/Repos/rational-onion/frontend/src/ArgumentDAG.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport cytoscape from 'cytoscape';\nimport tippy from 'tippy.js';\nimport 'tippy.js/dist/tippy.css';\nimport './ArgumentDAG.css'; // If you want separate styling\n\nconst ArgumentDAG = () => {\n  const containerRef = useRef(null);\n  const cyRef = useRef(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Check if container is available\n        if (!containerRef.current) {\n          console.error(\"Container ref not available\");\n          setError(\"Container reference not available. Please try refreshing the page.\");\n          setLoading(false);\n          return;\n        }\n\n        console.log(\"Container ref available, fetching data...\");\n        \n        const response = await fetch('http://localhost:8000/visualize-argument-dag', {\n          method: 'GET',\n          headers: {\n            'X-API-Key': 'test_api_key_123',\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          mode: 'cors',\n          credentials: 'same-origin'\n        });\n\n        if (!response.ok) {\n          throw new Error(`API responded with status: ${response.status}`);\n        }\n\n        const data = await response.json();\n        console.log(\"Data received:\", data);\n\n        if (!data || !data.nodes || !data.edges || data.nodes.length === 0) {\n          setError(\"No graph data available. The API returned empty data.\");\n          setLoading(false);\n          return;\n        }\n\n        // Initialize Cytoscape\n        cyRef.current = cytoscape({\n          container: containerRef.current,\n          elements: {\n            nodes: data.nodes,\n            edges: data.edges\n          },\n          style: [\n            {\n              selector: 'node',\n              style: {\n                'background-color': '#FF4136',\n                'label': 'data(label)',\n                'text-valign': 'center',\n                'color': '#fff',\n                'font-size': '12px',\n                'width': 80,\n                'height': 80,\n                'text-wrap': 'wrap'\n              }\n            },\n            {\n              selector: 'edge',\n              style: {\n                'width': 2,\n                'line-color': '#ccc',\n                'target-arrow-shape': 'triangle',\n                'target-arrow-color': '#ccc',\n                'curve-style': 'bezier',\n                'label': 'data(label)'\n              }\n            }\n          ],\n          layout: data.layout || {\n            name: 'cose',\n            animate: true,\n            nodeDimensionsIncludeLabels: true\n          }\n        });\n\n        // Add event listeners for filtering\n        const filterByClaim = (claimType) => {\n          cyRef.current.nodes().forEach(node => {\n            if (node.data('type') === claimType) {\n              node.style('opacity', 1);\n            } else {\n              node.style('opacity', 0.3);\n            }\n          });\n        };\n\n        const resetFilter = () => {\n          cyRef.current.nodes().style('opacity', 1);\n        };\n\n        // Add event listeners to buttons if they exist\n        const claimFilterBtn = document.getElementById('filter-claims');\n        const resetFilterBtn = document.getElementById('reset-filter');\n\n        if (claimFilterBtn) {\n          claimFilterBtn.addEventListener('click', () => filterByClaim('claim'));\n        }\n\n        if (resetFilterBtn) {\n          resetFilterBtn.addEventListener('click', resetFilter);\n        }\n\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error loading visualization:\", err);\n        setError(`Error loading visualization: ${err.message}`);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n\n    // Cleanup function\n    return () => {\n      if (cyRef.current) {\n        cyRef.current.destroy();\n      }\n      \n      // Remove event listeners\n      const claimFilterBtn = document.getElementById('filter-claims');\n      const resetFilterBtn = document.getElementById('reset-filter');\n      \n      if (claimFilterBtn) {\n        claimFilterBtn.removeEventListener('click', () => {});\n      }\n      \n      if (resetFilterBtn) {\n        resetFilterBtn.removeEventListener('click', () => {});\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"dag-container\">\n      {loading && <div className=\"loading-message\">Initializing visualization...</div>}\n      {error && <div className=\"error-message\">{error}</div>}\n      <div \n        ref={containerRef} \n        className=\"cytoscape-container\" \n        style={{ \n          width: '100%', \n          height: '600px',\n          display: loading || error ? 'none' : 'block'\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ArgumentDAG;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
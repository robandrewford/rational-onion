---
description: Technical strategy and implementation approach for Rational Onion
globs: ["rational_onion/**/*.py", "tests/**/*.py", "frontend/src/**/*"]
---

# Rational Onion - Technical Strategy

## Core Architecture Components

### 1. Argument Processing Pipeline
```mermaid
graph TD
    A[Raw Input] --> B[LLM Structure Analysis]
    B --> C[Toulmin Model Validation]
    C --> D[Citation Verification]
    D --> E[Graph Construction]
    E --> F[Neo4j Storage]
    F --> G[Visualization]
```

### 2. LLM Integration Strategy

#### Prompt Engineering
```python
TOULMIN_TEMPLATE = """
Given the following argument, analyze using Toulmin's model:
{input_text}

Requirements:
1. Each claim must have verifiable grounds
2. Warrants must explicitly connect grounds to claims
3. All citations must be traceable
4. Identify potential rebuttals
5. Specify qualifiers for claim scope

Output Schema:
{
    "claim": str,
    "grounds": List[{"statement": str, "citation": str}],
    "warrant": {"logic": str, "backing": List[str]},
    "rebuttal": Optional[str],
    "qualifier": Optional[str]
}
"""
```

#### Validation Chain
```python
class ArgumentValidator:
    async def validate(self, argument: ToulminArgument) -> ValidationResult:
        steps = [
            self.validate_structure(),      # Check Toulmin completeness
            self.verify_citations(),        # Verify source authenticity
            self.check_logical_flow(),      # Ensure warrant connects grounds to claim
            self.detect_contradictions(),   # Find internal inconsistencies
            self.validate_graph_structure() # Ensure DAG properties
        ]
        return await asyncio.gather(*steps)
```

### 3. Data Flow Architecture

#### Processing Pipeline
```python
class ArgumentProcessor:
    def process(self, input_text: str) -> ProcessedArgument:
        return (
            self.preprocess_text()
            .extract_citations()
            .structure_with_llm()
            .validate_structure()
            .construct_graph()
            .store_in_neo4j()
        )
```

## Implementation Strategy

### 1. Core Services

#### Neo4j Integration
```python
# Graph Schema
CREATE CONSTRAINT argument_unique IF NOT EXISTS
FOR (a:Argument) REQUIRE a.id IS UNIQUE;

CREATE CONSTRAINT claim_unique IF NOT EXISTS
FOR (c:Claim) REQUIRE c.hash IS UNIQUE;

// Relationship Types
(:Claim)-[:SUPPORTED_BY]->(:Ground)
(:Ground)-[:CONNECTED_VIA]->(:Warrant)
(:Claim)-[:QUALIFIED_BY]->(:Qualifier)
(:Claim)-[:REBUTTED_BY]->(:Rebuttal)
```

#### Redis Caching
```python
CACHE_STRATEGY = {
    'argument_structure': {
        'ttl': 3600,           # 1 hour
        'invalidate_on': ['structure_update', 'citation_change']
    },
    'citation_data': {
        'ttl': 86400,          # 24 hours
        'invalidate_on': ['source_update']
    },
    'graph_layout': {
        'ttl': 1800,           # 30 minutes
        'invalidate_on': ['node_update', 'edge_update']
    }
}
```

### 2. Quality Metrics

#### Argument Quality Score
```python
class QualityMetrics:
    def calculate_score(self, argument: ToulminArgument) -> ArgumentScore:
        return ArgumentScore(
            structure_completeness=self._check_toulmin_completeness(),
            citation_validity=self._verify_citations(),
            logical_consistency=self._check_logical_flow(),
            graph_integrity=self._validate_dag_properties()
        )
```

#### Performance Targets
```python
PERFORMANCE_SLA = {
    'argument_processing': {
        'p95_latency': 2000,  # ms
        'success_rate': 0.99
    },
    'citation_verification': {
        'p95_latency': 1000,  # ms
        'accuracy': 0.95
    },
    'graph_operations': {
        'p95_latency': 500,   # ms
        'consistency': 0.99
    }
}
```

### 3. Testing Strategy

#### Unit Test Coverage
```python
# Key test areas
test_argument_structure/
    test_toulmin_validation.py
    test_citation_verification.py
    test_logical_consistency.py

test_graph_operations/
    test_dag_construction.py
    test_cycle_detection.py
    test_relationship_validation.py

test_integration/
    test_llm_processing.py
    test_neo4j_operations.py
    test_cache_effectiveness.py
```

### 4. Monitoring and Observability

#### Key Metrics
```python
MONITORING_METRICS = {
    'argument_quality': [
        'structure_completeness_score',
        'citation_validity_rate',
        'logical_consistency_score'
    ],
    'system_performance': [
        'llm_response_time',
        'graph_operation_latency',
        'cache_hit_ratio'
    ],
    'error_rates': [
        'validation_failures',
        'citation_verification_errors',
        'graph_consistency_violations'
    ]
}
```

#### Health Checks
```python
async def health_check() -> HealthStatus:
    return {
        'llm_service': await check_llm_availability(),
        'neo4j_connection': await verify_db_connection(),
        'redis_cache': await validate_cache_state(),
        'citation_service': await check_citation_api()
    }
```

## Development Guidelines

### 1. Code Organization
- Follow domain-driven design principles
- Implement clear service boundaries
- Use dependency injection for service composition
- Maintain comprehensive type hints

### 2. Error Handling
```python
class ArgumentError(Exception):
    def __init__(self, error_type: ErrorType, details: Dict):
        self.error_type = error_type
        self.details = details
        super().__init__(self._format_message())
```

### 3. API Versioning
- Use semantic versioning
- Maintain backwards compatibility
- Document breaking changes
- Provide migration guides

### 4. Security Considerations
- Implement API key authentication
- Validate all input data
- Rate limit API endpoints
- Sanitize graph queries
